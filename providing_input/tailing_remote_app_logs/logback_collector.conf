// Graylog Collector configuration.

// URL to REST API of Graylog server this collector registers at
server-url = "http://<your_graylog_host_ip>:12900"

// Enable registration with the Graylog server. (enabled by default)
//enable-registration = true

// The id used to identify this collector. Can be either a string which is used as id,
// or the location of a file if prefixed with "file:". If the file does not exist,
// an id will be generated and written to that file. If it exists, it is expected
// to contain a single string without spaces which will be used for the id.
// Defaults to "file:config/collector-id" if not specified.
collector-id = "file:config/collector-id"

inputs {
  <app_name>_<instance_name1> {
    type = "file"
    path = "<logfile1_path>/<logfile1_name>.log"
    content-splitter = "PATTERN"
    content-splitter-pattern = "^(.*?)\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2},\\d{3}"
    message-fields = {"app_name" = "<app1_name>", "app_instance" = "<app1_instance>", "app_version" = "<app1_version>"}
  }
  <app_name>_<instance_name2> {
    type="file"
    path = "<logfile2_path>/<logfile2_name>.log"
    content-splitter = "PATTERN"
    content-splitter-pattern = "^(.*?)\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2},\\d{3}"
    message-fields = {"app_name" = "<app1_name>", "app_instance" = "<app1_instance>", "app_version" = "<app1_version>"}
  }
}

outputs {
  // GELF output to send messages to a Graylog server. Usually only type, host and port are needed.
  // The other options are for TLS support and to fine-tune the GELF client library.
  gelf-tcp {
    type = "gelf"
    host = "<your_graylog_host_ip>"
    port = <port_num (beginning at 12201)>
  }

  // Prints all messages to STDOUT. Useful for debugging. Do not enable in production usage!
  console {
    type = "stdout"
  }
}

